// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./DrugTypes.sol";

library DrugRequests {
    function handleDistributorRequest(
        mapping(uint256 => DrugTypes.DrugBatch) storage drugBatches,
        uint256 nextBatchId,
        DrugTypes.DistributorRequest memory request
    ) external returns (uint256) {
        uint256 expiryDate = block.timestamp + (365 * 24 * 60 * 60); // 1 year from now
        bytes32 merkleRoot = keccak256(abi.encodePacked(request.drugName, block.timestamp));
        string memory ipfsHash = "QmAutoGenerated";
        string memory drugCode = string(abi.encodePacked(request.drugName, "_", block.timestamp));
        string memory regulatoryApproval = "AUTO_APPROVED";
        
        uint256 batchId = nextBatchId;
        
        drugBatches[batchId] = DrugTypes.DrugBatch({
            batchId: batchId,
            drugName: request.drugName,
            drugCode: drugCode,
            manufacturer: msg.sender,
            merkleRoot: merkleRoot,
            ipfsHash: ipfsHash,
            quantity: request.quantity,
            originalQuantity: request.quantity,
            manufactureDate: block.timestamp,
            expiryDate: expiryDate,
            status: DrugTypes.DrugStatus.Manufactured,
            currentHolder: msg.sender,
            transferCount: 0,
            isRecalled: false,
            regulatoryApproval: regulatoryApproval
        });
        
        return batchId;
    }
}
